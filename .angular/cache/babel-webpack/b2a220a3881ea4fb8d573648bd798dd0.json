{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { ChangeDetectionStrategy, Component, EventEmitter, ViewChild } from '@angular/core';\nimport { fromMovie, MovieActions } from '@clmovies/shareds/movie';\nimport { errorImage, gotToTop, trackById } from '@clmovies/shareds/utils/utils/functions';\nimport { IonContent, IonInfiniteScroll } from '@ionic/angular';\nimport { select } from '@ngrx/store';\nimport { startWith, switchMap, tap, map } from 'rxjs/operators';\nlet HomePage = class HomePage {\n  constructor(store) {\n    this.store = store;\n    this.gotToTop = gotToTop;\n    this.trackById = trackById;\n    this.errorImage = errorImage;\n    this.showButton = false;\n    this.infiniteScroll$ = new EventEmitter();\n    this.statusComponent = {\n      perPage: 1,\n      typeMovie: 'popular'\n    };\n    this.total$ = this.store.pipe(select(fromMovie.getTotalPages));\n    this.status$ = this.store.pipe(select(fromMovie.getStatus));\n    this.movies$ = this.infiniteScroll$.pipe(startWith(this.statusComponent), tap(({\n      perPage: page,\n      typeMovie\n    }) => this.store.dispatch(MovieActions.loadMovies({\n      typeMovie,\n      page: page === null || page === void 0 ? void 0 : page.toString()\n    }))), switchMap(() => this.store.pipe(select(fromMovie.getMovies))));\n    this.info$ = this.store.select(fromMovie.getTotalPages).pipe(map(pokemon => {\n      return 'hola kevin';\n    }), tap(data => console.log(data)));\n  }\n\n  segmentChanged(event) {\n    var _a;\n\n    this.store.dispatch(MovieActions.deleteMovies());\n    this.content.scrollToTop();\n    this.statusComponent = Object.assign(Object.assign({}, this.statusComponent), {\n      perPage: 1,\n      typeMovie: (_a = event === null || event === void 0 ? void 0 : event.detail) === null || _a === void 0 ? void 0 : _a.value\n    });\n    this.infiniteScroll$.next(this.statusComponent);\n  } // REFRESH\n\n\n  doRefresh(event) {\n    setTimeout(() => {\n      this.statusComponent = Object.assign(Object.assign({}, this.statusComponent), {\n        perPage: 1\n      });\n      this.infiniteScroll$.next(this.statusComponent);\n      if (this.ionInfiniteScroll) this.ionInfiniteScroll.disabled = false;\n      event.target.complete();\n    }, 500);\n  } // INIFINITE SCROLL\n\n\n  loadData(event, total) {\n    setTimeout(() => {\n      var _a, _b;\n\n      this.statusComponent = Object.assign(Object.assign({}, this.statusComponent), {\n        perPage: ((_a = this.statusComponent) === null || _a === void 0 ? void 0 : _a.perPage) + 1\n      });\n\n      if (((_b = this.statusComponent) === null || _b === void 0 ? void 0 : _b.perPage) > total) {\n        if (this.ionInfiniteScroll) this.ionInfiniteScroll.disabled = true;\n      }\n\n      this.infiniteScroll$.next(this.statusComponent);\n      event.target.complete();\n    }, 500);\n  } // SCROLL EVENT\n\n\n  logScrolling({\n    detail: {\n      scrollTop\n    }\n  }) {\n    if (scrollTop >= 300) this.showButton = true;else this.showButton = false;\n  }\n\n};\n\n__decorate([ViewChild(IonInfiniteScroll)], HomePage.prototype, \"ionInfiniteScroll\", void 0);\n\n__decorate([ViewChild(IonContent, {\n  static: true\n})], HomePage.prototype, \"content\", void 0);\n\nHomePage = __decorate([Component({\n  selector: 'app-home',\n  template: `\n    <ion-content [fullscreen]=\"true\" [scrollEvents]=\"true\" (ionScroll)=\"logScrolling($any($event))\">\n      <div class=\"container components-color\">\n\n        <div class=\"div-header-fixed header\">\n          <!-- HEADER  -->\n          <div class=\"div-center margin-top\" no-border>\n            <h1 class=\"text-second-color\">{{'COMMON.MOVIES' | translate }}</h1>\n          </div>\n\n          <!-- Disabled Segment -->\n          <ion-segment (ionChange)=\"segmentChanged($event)\" value=\"popular\">\n            <ion-segment-button value=\"popular\">\n              <ion-label>{{ 'COMMON.POPULAR' | translate }}</ion-label>\n            </ion-segment-button>\n            <ion-segment-button value=\"top_rated\">\n              <ion-label>{{ 'COMMON.TOP_RATED' | translate }}</ion-label>\n            </ion-segment-button>\n            <ion-segment-button value=\"upcoming\">\n              <ion-label>{{ 'COMMON.UPCOMMING' | translate }}</ion-label>\n            </ion-segment-button>\n          </ion-segment>\n        </div>\n\n\n        <!-- <ng-container *ngIf=\"(movies$ | async) as movies\"> -->\n          <!-- <ng-container *ngIf=\"(status$ | async) as status\">\n            <ng-container *ngIf=\"status !== 'pending' || statusComponent?.perPage !== 1; else loader\">\n              <ng-container *ngIf=\"status !== 'error'; else serverError\">\n\n                <ng-container *ngIf=\"movies?.length > 0; else noData\">\n\n                  <ion-card class=\"ion-activatable ripple-parent fade-in-card\" [routerLink]=\"['/movie/'+movie?.id]\" *ngFor=\"let movie of movies; trackBy: trackById\" >\n                    <img loading=\"lazy\" [src]=\"'https://image.tmdb.org/t/p/w500'+movie?.poster_path\" [alt]=\"movie?.poster_path\" (error)=\"errorImage($event)\"/>\n\n                    <ion-card-header>\n                      <ion-card-title class=\"text-color\">{{movie?.original_title}}</ion-card-title>\n                    </ion-card-header>\n\n                    <ion-card-content class=\"text-color\">\n                    {{ 'COMMON.POINTS' | translate }}: {{movie?.vote_average}}\n                    </ion-card-content>\n                    <ion-ripple-effect></ion-ripple-effect>\n                  </ion-card>\n\n                  <ng-container *ngIf=\"(total$ | async) as total\">\n                    <ng-container *ngIf=\"statusComponent?.perPage !== total\">\n                      <ion-infinite-scroll threshold=\"100px\" (ionInfinite)=\"loadData($event, total)\">\n                        <ion-infinite-scroll-content class=\"loadingspinner\">\n                          <ion-spinner *ngIf=\"status === 'pending'\" class=\"loadingspinner\"></ion-spinner>\n                        </ion-infinite-scroll-content>\n                      </ion-infinite-scroll>\n                    </ng-container>\n                  </ng-container>\n\n                </ng-container>\n\n              </ng-container>\n            </ng-container>\n          </ng-container>\n        </ng-container> -->\n\n        <!-- <ng-container *ngIf=\"(pokemon$ | async) as pokemons\">\n          <ion-card class=\"text-color\" *ngFor=\"let pokemon of pokemons\">\n            {{ pokemon?.name }}\n          </ion-card>\n        </ng-container> -->\n\n\n        <ng-container *ngIf=\"(info$ | async) as info\">\n          <ion-card class=\"text-color\">{{info}}</ion-card>\n        </ng-container>\n\n        <ion-card class=\"text-color\">{{info}}</ion-card>\n        </ng-container>\n        <ion-card class=\"text-color\">{{info}}</ion-card>\n        </ng-container>\n        <ion-card class=\"text-color\">{{info}}</ion-card>\n        </ng-container>\n        <ion-card class=\"text-color\">{{info}}</ion-card>\n        </ng-container>\n        <ion-card class=\"text-color\">{{info}}</ion-card>\n        </ng-container>\n        <ion-card class=\"text-color\">{{info}}</ion-card>\n        </ng-container>\n        <ion-card class=\"text-color\">{{info}}</ion-card>\n        </ng-container>\n\n         <!-- REFRESH -->\n        <ion-refresher slot=\"fixed\" (ionRefresh)=\"doRefresh($event)\">\n          <ion-refresher-content></ion-refresher-content>\n        </ion-refresher>\n\n        <!-- IS ERROR -->\n        <ng-template #serverError>\n          <div class=\"error-serve\">\n            <div>\n              <span><ion-icon class=\"text-second-color big-size\" name=\"cloud-offline-outline\"></ion-icon></span>\n              <br>\n              <span class=\"text-second-color\">{{'COMMON.ERROR' | translate }}</span>\n            </div>\n          </div>\n        </ng-template>\n\n        <!-- IS NO DATA  -->\n        <ng-template #noData>\n          <div class=\"error-serve\">\n            <span class=\"text-second-color\">{{ 'COMMON.NORESULT' | translate }}</span>\n          </div>\n        </ng-template>\n\n        <!-- LOADER  -->\n        <ng-template #loader>\n          <ion-spinner class=\"loadingspinner\"></ion-spinner>\n        </ng-template>\n\n      </div>\n\n      <!-- TO TOP BUTTON  -->\n      <ion-fab *ngIf=\"showButton\" vertical=\"bottom\" horizontal=\"end\" slot=\"fixed\">\n        <ion-fab-button class=\"back-color\" (click)=\"gotToTop(content)\"> <ion-icon name=\"arrow-up-circle-outline\"></ion-icon></ion-fab-button>\n      </ion-fab>\n    </ion-content >\n  `,\n  styleUrls: ['./home.page.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})], HomePage);\nexport { HomePage };","map":null,"metadata":{},"sourceType":"module"}