{"ast":null,"code":"import { NotificationActions } from '@clmovies/shareds/notification';\nimport { EntityStatus } from '@clmovies/shareds/utils/utils/functions';\nimport { createEffect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport * as MovieActions from '../actions/movie.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../services/movie.service\";\nexport let MovieEffects = /*#__PURE__*/(() => {\n  class MovieEffects {\n    constructor(actions$, _movie) {\n      this.actions$ = actions$;\n      this._movie = _movie;\n      this.loadMenu$ = createEffect(() => this.actions$.pipe(ofType(MovieActions.loadMenu), switchMap(() => this._movie.getMenu().pipe(map(menu => MovieActions.saveMenu({\n        menu,\n        status: EntityStatus.Loaded,\n        error: undefined\n      })), catchError(error => of(MovieActions.saveMenu({\n        menu: [],\n        status: EntityStatus.Error,\n        error\n      }), NotificationActions.notificationFailure({\n        message: 'ERRORS.ERROR_LOAD_MOVIE_MENU'\n      })))))));\n      this.loadMovies$ = createEffect(() => this.actions$.pipe(ofType(MovieActions.loadMovies), switchMap(({\n        typeMovie,\n        page\n      }) => this._movie.getMoviesPopular(typeMovie, page).pipe(map(({\n        movies,\n        page,\n        total_pages,\n        total_results\n      }) => MovieActions.saveMovies({\n        movies,\n        page,\n        total_pages,\n        total_results,\n        status: EntityStatus.Loaded,\n        error: undefined\n      })), catchError(error => of(MovieActions.saveMovies({\n        movies: [],\n        page: 1,\n        total_pages: 0,\n        total_results: 0,\n        status: EntityStatus.Error,\n        error\n      }), NotificationActions.notificationFailure({\n        message: 'ERRORS.ERROR_LOAD_MOVIES'\n      })))))));\n      this.loadMovie$ = createEffect(() => this.actions$.pipe(ofType(MovieActions.loadMovie), switchMap(({\n        idMovie\n      }) => this._movie.getMovie(idMovie).pipe(map(movie => MovieActions.saveMovie({\n        movie,\n        status: EntityStatus.Loaded,\n        error: undefined\n      })), catchError(error => of(MovieActions.saveMovie({\n        movie: {},\n        status: EntityStatus.Error,\n        error\n      }), NotificationActions.notificationFailure({\n        message: 'ERRORS.ERROR_LOAD_MOVIE'\n      })))))));\n      this.loadMoviesMenu$ = createEffect(() => of(MovieActions.loadMenu()));\n    }\n\n  }\n\n  MovieEffects.ɵfac = function MovieEffects_Factory(t) {\n    return new (t || MovieEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.MovieService));\n  };\n\n  MovieEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MovieEffects,\n    factory: MovieEffects.ɵfac\n  });\n  return MovieEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}