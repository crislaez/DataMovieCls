{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { registerLocaleData } from '@angular/common';\nimport { filter, map, startWith } from 'rxjs/operators';\nexport class DynamicLocaleId extends String {\n  constructor(translate) {\n    super('');\n    this.translate = translate;\n    const langs = [...this.translate.langs];\n    this._localeLoaded = (this.translate.langs || []).reduce((acc, lang) => Object.assign(Object.assign({}, acc), {\n      [lang]: false\n    }), {});\n    this.translate.onLangChange.pipe(map(({\n      lang\n    }) => lang), startWith(this.translate.currentLang), filter(Boolean)).subscribe(lang => __awaiter(this, void 0, void 0, function* () {\n      if ((langs || []).includes(lang)) {\n        langs.splice(langs.indexOf(lang), 1);\n        const angularLocale = yield this.loadLocale(lang);\n        registerLocaleData(angularLocale.default);\n      }\n    }));\n  }\n\n  loadLocale(lang) {\n    switch (lang) {\n      case 'es':\n        return import(`@angular/common/locales/es`);\n\n      case 'en':\n        return import(`@angular/common/locales/en`);\n\n      default:\n        return Promise.reject('Locale not supported');\n    }\n  }\n\n  isLocaleLoaded(lang) {\n    return this._localeLoaded[lang];\n  }\n\n  toString() {\n    return this.translate.currentLang;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}