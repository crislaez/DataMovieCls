{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { createEffect, ofType } from '@ngrx/effects';\nimport { tap } from 'rxjs/operators';\nimport * as NotificationActions from '../actions/notification.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"@ngx-translate/core\";\nimport * as i3 from \"@ionic/angular\";\nexport let NotificationEffects = /*#__PURE__*/(() => {\n  class NotificationEffects {\n    constructor(actions$, translate, toastController) {\n      this.actions$ = actions$;\n      this.translate = translate;\n      this.toastController = toastController;\n      this.notificationSuccess$ = createEffect(() => this.actions$.pipe(ofType(NotificationActions.notificationSuccess), tap(({\n        message\n      }) => this.presentToast(this.translate.instant(message), 'success'))), {\n        dispatch: false\n      });\n      this.notificationFailure$ = createEffect(() => this.actions$.pipe(ofType(NotificationActions.notificationFailure), tap(({\n        message\n      }) => this.presentToast(this.translate.instant(message), 'danger'))), {\n        dispatch: false\n      });\n    }\n\n    presentToast(message, color) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const toast = yield this.toastController.create({\n          message: message,\n          color: color,\n          duration: 1000\n        });\n        toast.present();\n      });\n    }\n\n  }\n\n  NotificationEffects.ɵfac = function NotificationEffects_Factory(t) {\n    return new (t || NotificationEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.TranslateService), i0.ɵɵinject(i3.ToastController));\n  };\n\n  NotificationEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NotificationEffects,\n    factory: NotificationEffects.ɵfac\n  });\n  return NotificationEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}