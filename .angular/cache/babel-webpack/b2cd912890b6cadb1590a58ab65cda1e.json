{"ast":null,"code":"import { of, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../../../core/services/core-config.service\";\nexport let TvService = /*#__PURE__*/(() => {\n  class TvService {\n    constructor(http, _coreConfig) {\n      this.http = http;\n      this._coreConfig = _coreConfig;\n      this.baseURL = `${this._coreConfig.getEndpoint()}`;\n      this.apiKey = this._coreConfig.getApiKey();\n    }\n\n    getMenuTv() {\n      return this.http.get(`${this.baseURL}genre/tv/list?api_key=${this.apiKey}`).pipe(map(({\n        genres\n      }) => genres || []), catchError(error => {\n        return throwError(() => error);\n      }));\n    }\n\n    getTvsPopular(typeMovie = 'popular', page = '1') {\n      return this.http.get(`${this.baseURL}tv/${typeMovie}?api_key=${this.apiKey}&page=${page}`).pipe(map(({\n        page,\n        results,\n        total_pages,\n        total_results\n      }) => ({\n        tvs: results || [],\n        page: page || 1,\n        total_pages: total_pages || 0,\n        total_results: total_results || 0\n      })), catchError(error => {\n        return throwError(() => error);\n      }));\n    }\n\n    getTvSerie(idTv) {\n      if (!idTv) return of({});\n      return this.http.get(`${this.baseURL}tv/${idTv}?api_key=${this.apiKey}`).pipe(map(data => data || {}), catchError(error => {\n        return throwError(() => error);\n      }));\n    }\n\n    getTvearch(searchName) {\n      return this.http.get(`${this.baseURL}search/tv?api_key=${this.apiKey}&query=${searchName}`).pipe(map(({\n        page,\n        results,\n        total_pages,\n        total_results\n      }) => ({\n        tvs: results || [],\n        page: page || 1,\n        total_pages: total_pages || 0,\n        total_results: total_results || 0\n      })), catchError(error => {\n        return throwError(() => error);\n      }));\n    }\n\n  }\n\n  TvService.ɵfac = function TvService_Factory(t) {\n    return new (t || TvService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.CoreConfigService));\n  };\n\n  TvService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TvService,\n    factory: TvService.ɵfac,\n    providedIn: 'root'\n  });\n  return TvService;\n})();","map":null,"metadata":{},"sourceType":"module"}