{"ast":null,"code":"import { NotificationActions } from '@clmovies/shareds/notification';\nimport { EntityStatus } from '@clmovies/shareds/utils/utils/functions';\nimport { createEffect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport * as Genrections from '../actions/genre.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../services/genre.service\";\nexport let GenreEffects = /*#__PURE__*/(() => {\n  class GenreEffects {\n    constructor(actions$, _genre) {\n      this.actions$ = actions$;\n      this._genre = _genre;\n      this.loadGenre$ = createEffect(() => this.actions$.pipe(ofType(Genrections.loadGenre), switchMap(({\n        idGenre,\n        page,\n        genre\n      }) => this._genre.getGenreById(idGenre, page, genre).pipe(map(({\n        genres,\n        page,\n        total_pages,\n        total_results\n      }) => Genrections.saveGenre({\n        genres,\n        page,\n        total_pages,\n        total_results,\n        status: EntityStatus.Loaded,\n        error: undefined\n      })), catchError(error => of(Genrections.saveGenre({\n        genres: [],\n        page: 1,\n        total_pages: 0,\n        total_results: 0,\n        status: EntityStatus.Error,\n        error\n      }), NotificationActions.notificationFailure({\n        message: 'ERRORS.ERROR_LOAD_INFO'\n      })))))));\n    }\n\n  }\n\n  GenreEffects.ɵfac = function GenreEffects_Factory(t) {\n    return new (t || GenreEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.GenreService));\n  };\n\n  GenreEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GenreEffects,\n    factory: GenreEffects.ɵfac\n  });\n  return GenreEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}