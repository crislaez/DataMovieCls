{"ast":null,"code":"import { NotificationActions } from '@clmovies/shareds/notification';\nimport { EntityStatus } from '@clmovies/shareds/utils/utils/functions';\nimport { createEffect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport * as SearchActions from '../actions/search.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../services/search.service\";\nexport let SearchEffects = /*#__PURE__*/(() => {\n  class SearchEffects {\n    constructor(actions$, _search) {\n      this.actions$ = actions$;\n      this._search = _search;\n      this.loadSearch$ = createEffect(() => this.actions$.pipe(ofType(SearchActions.loadSearch), switchMap(({\n        searchName,\n        searchType,\n        page\n      }) => this._search.getSearch(searchName, searchType, page).pipe(map(({\n        searchs,\n        page,\n        total_pages,\n        total_results\n      }) => SearchActions.saveSearch({\n        searchs,\n        page,\n        total_pages,\n        total_results,\n        searchType,\n        status: EntityStatus.Loaded,\n        error: undefined\n      })), catchError(error => of(SearchActions.saveSearch({\n        searchs: [],\n        page: 1,\n        total_pages: 0,\n        total_results: 0,\n        searchType,\n        status: EntityStatus.Error,\n        error\n      }), NotificationActions.notificationFailure({\n        message: 'ERRORS.ERROR_LOAD_MOVIE_MENU'\n      })))))));\n    }\n\n  }\n\n  SearchEffects.ɵfac = function SearchEffects_Factory(t) {\n    return new (t || SearchEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.SearchService));\n  };\n\n  SearchEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SearchEffects,\n    factory: SearchEffects.ɵfac\n  });\n  return SearchEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}