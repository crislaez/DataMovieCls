{"ast":null,"code":"import { NotificationActions } from '@clmovies/shareds/notification';\nimport { EntityStatus } from '@clmovies/shareds/shared/utils/utils';\nimport { createEffect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport * as TvActions from '../actions/tv.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../services/tv.service\";\nexport let TvEffects = /*#__PURE__*/(() => {\n  class TvEffects {\n    constructor(actions$, _tv) {\n      this.actions$ = actions$;\n      this._tv = _tv;\n      this.loadMenuTv$ = createEffect(() => this.actions$.pipe(ofType(TvActions.loadMenuTv), switchMap(() => this._tv.getMenuTv().pipe(map(menu => TvActions.saveMenuTv({\n        menu: menu || [],\n        status: EntityStatus.Loaded,\n        error: undefined\n      })), catchError(error => of(TvActions.saveMenuTv({\n        menu: [],\n        status: EntityStatus.Error,\n        error\n      }), NotificationActions.notificationFailure({\n        message: 'ERRORS.ERROR_LOAD_TV_MENU'\n      })))))));\n      this.loadTvs$ = createEffect(() => this.actions$.pipe(ofType(TvActions.loadTvs), switchMap(({\n        typeTv,\n        page\n      }) => this._tv.getTvsPopular(typeTv, page).pipe(map(({\n        tvs,\n        page,\n        total_pages,\n        total_results\n      }) => TvActions.saveTvs({\n        tvs,\n        page,\n        total_pages,\n        total_results,\n        status: EntityStatus.Loaded,\n        error: undefined\n      })), catchError(error => of(TvActions.saveTvs({\n        tvs: [],\n        page: 1,\n        total_pages: 0,\n        total_results: 0,\n        status: EntityStatus.Error,\n        error\n      }), NotificationActions.notificationFailure({\n        message: 'ERRORS.ERROR_LOAD_TVS'\n      })))))));\n      this.loadTvsGenre$ = createEffect(() => this.actions$.pipe(ofType(TvActions.loadTvsGenre), switchMap(({\n        page,\n        idGenre\n      }) => this._tv.getTvsByIdGenre(page, idGenre).pipe(map(({\n        tvs,\n        page,\n        total_pages,\n        total_results\n      }) => TvActions.saveTvsGenre({\n        tvs,\n        page,\n        total_pages,\n        total_results,\n        status: EntityStatus.Loaded,\n        error: undefined\n      })), catchError(error => of(TvActions.saveTvsGenre({\n        tvs: [],\n        page: 1,\n        total_pages: 0,\n        total_results: 0,\n        status: EntityStatus.Error,\n        error\n      }), NotificationActions.notificationFailure({\n        message: 'ERRORS.ERROR_LOAD_TV_GENRE'\n      })))))));\n      this.loadTvInit$ = createEffect(() => of(TvActions.loadMenuTv()));\n    }\n\n  }\n\n  TvEffects.ɵfac = function TvEffects_Factory(t) {\n    return new (t || TvEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.TvService));\n  };\n\n  TvEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TvEffects,\n    factory: TvEffects.ɵfac\n  });\n  return TvEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}