{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../../../core/services/core-config.service\";\nexport let MovieService = /*#__PURE__*/(() => {\n  class MovieService {\n    constructor(http, _coreConfig) {\n      this.http = http;\n      this._coreConfig = _coreConfig;\n      this.baseURL = `${this._coreConfig.getEndpoint()}`;\n      this.apiKey = this._coreConfig.getApiKey();\n    }\n\n    getMenu() {\n      return this.http.get(`${this.baseURL}genre/movie/list?api_key=${this.apiKey}`).pipe(map(({\n        genres\n      }) => genres || []), catchError(error => {\n        return throwError(() => error);\n      }));\n    }\n\n    getMovie(idMovie) {\n      if (!idMovie) return null;\n      return this.http.get(`${this.baseURL}movie/${idMovie}?api_key=${this.apiKey}`).pipe( // map( (data) => (data || {})),\n      map(data => ({}), // map(() => {\n      //   throw 504\n      // }),\n      catchError(error => {\n        return throwError(() => error);\n      })));\n    }\n\n    getMoviesPopular(typeMovie = 'popular', page = '1') {\n      return this.http.get(`${this.baseURL}movie/${typeMovie}?api_key=${this.apiKey}&page=${page}`).pipe(map(({\n        page,\n        results,\n        total_pages,\n        total_results\n      }) => ({\n        movies: results || [],\n        page: page || 1,\n        total_pages: total_pages || 0,\n        total_results: total_results || 0\n      })), catchError(error => {\n        return throwError(() => error);\n      }));\n    }\n\n    getMoviesByIdGenre(page = '1', genre = '12') {\n      return this.http.get(`${this.baseURL}genre/${genre}/movies?api_key=${this.apiKey}&page=${page}`).pipe(map(({\n        page,\n        results,\n        total_pages,\n        total_results\n      }) => ({\n        movies: results || [],\n        page: page || 1,\n        total_pages: total_pages || 0,\n        total_results: total_results || 0\n      })), catchError(error => {\n        return throwError(() => error);\n      }));\n    }\n\n    getMoviesSearch(searchName) {\n      return this.http.get(`${this.baseURL}search/movie?api_key=${this.apiKey}&query=${searchName}`).pipe(map(({\n        page,\n        results,\n        total_pages,\n        total_results\n      }) => ({\n        movies: results || [],\n        page: page || 1,\n        total_pages: total_pages || 0,\n        total_results: total_results || 0\n      })), catchError(error => {\n        return throwError(() => error);\n      }));\n    }\n\n  }\n\n  MovieService.ɵfac = function MovieService_Factory(t) {\n    return new (t || MovieService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.CoreConfigService));\n  };\n\n  MovieService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MovieService,\n    factory: MovieService.ɵfac,\n    providedIn: 'root'\n  });\n  return MovieService;\n})();","map":null,"metadata":{},"sourceType":"module"}